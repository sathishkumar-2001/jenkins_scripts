jenkins installation
https://www.jenkins.io/doc/book/installing/linux/

docker run -d --name jenkins -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts

docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword



 Phase 1: Fundamentals
Jenkins Overview ‚Äì Architecture, Components, Use Cases.

Installation & Setup ‚Äì Installing Jenkins on various platforms (local, Docker, Kubernetes, cloud).

Jenkins UI & Configuration ‚Äì Managing users, authentication, authorization.

Phase 2: Pipeline Basics
Freestyle vs. Pipeline Jobs ‚Äì Understanding different job types.

Pipeline Syntax ‚Äì Declarative vs. Scripted Pipelines.

Creating Basic Pipelines ‚Äì Writing simple Jenkinsfile, stages, steps.

SCM Integration ‚Äì Connecting Git, GitHub, GitLab.

Phase 3: Advanced Pipelines & Automation
Pipeline as Code (Jenkinsfile) ‚Äì Parameters, conditionals, parallel execution.

Groovy Scripting ‚Äì Writing functions, shared libraries.

Multibranch & Dynamic Pipelines ‚Äì Working with feature branches.

Jenkins Agents & Nodes ‚Äì Distributed builds, setting up worker nodes.

Phase 4: Security & Best Practices
Security Hardening ‚Äì RBAC, Secrets Management, Credentials.

Backup & Disaster Recovery ‚Äì Managing Jenkins backup strategies.

Phase 5: Integrations & Plugins
GitHub, GitLab, Bitbucket Webhooks ‚Äì Triggering builds.

Artifact Management ‚Äì Integrating with JFrog Artifactory, Nexus.

Containerization & Orchestration ‚Äì Running Jenkins in Kubernetes, Docker.

Phase 6: Scaling & Performance Optimization
Monitoring & Logging ‚Äì Using Prometheus, Grafana, ELK Stack for Jenkins monitoring.

Scaling Jenkins ‚Äì High Availability, Master-Agent Architecture.

Phase 7: CI/CD Best Practices & Real-World Use Cases
Complete CI/CD Setup ‚Äì Deploying apps to AWS, Kubernetes.

Jenkins with Infrastructure as Code ‚Äì Terraform, Ansible, Helm.        



Jenkins is an open-source automation server used for CI/CD (Continuous Integration/Continuous Deployment). It helps automate building, testing, and deploying applications.

Jenkins Architecture
Jenkins follows a master-agent architecture:

Jenkins Master: Handles UI, job scheduling, and management.

Jenkins Agents (Nodes): Execute jobs as instructed by the master.



Pipeline Syntax: Declarative vs. Scripted Pipelines

Declarative Pipeline (Recommended)
A structured syntax that makes pipelines easier to read and maintain.

pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building the application...'
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
            }
        }
    }
}


Scripted Pipeline
More flexible but requires Groovy scripting knowledge.

node {
    stage('Build') {
        echo 'Building the application...'
    }
    stage('Test') {
        echo 'Running tests...'
    }
    stage('Deploy') {
        echo 'Deploying application...'
    }
}


Phase 3: Advanced Pipelines & Automation üöÄ
Now that you understand basic Jenkins pipelines, let's move on to advanced topics:

1Ô∏è‚É£ Pipeline as Code (Jenkinsfile Best Practices)
2Ô∏è‚É£ Groovy Scripting & Shared Libraries
3Ô∏è‚É£ Multibranch & Dynamic Pipelines
4Ô∏è‚É£ Jenkins Agents & Distributed Builds


‚úÖ Best Practices:
‚úî Use parameters to make pipelines dynamic.
‚úî Store secrets in Jenkins Credentials.
‚úî Add error handling to avoid pipeline failures.
‚úî Use parallel execution to speed up builds.


pipeline {
    agent any
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to build')
    }
    stages {
        stage('Clone') {
            steps {
                git branch: "${params.BRANCH_NAME}", url: 'https://github.com/your-repo.git'
            }
        }
    }
}


my-shared-library is the name of a Shared Library that is registered in Jenkins. It is hardcoded because it refers to a predefined Jenkins configuration where your Shared Library is stored.



GitHub Webhook for Auto-Builds

Steps to Configure Webhook in GitHub
Go to your GitHub repo ‚Üí Settings ‚Üí Webhooks

Click Add webhook

In Payload URL, enter:
http://<your-jenkins-url>/github-webhook/

Select application/json

Choose Just the push event

Click Add webhook

pipeline {
    agent any
    triggers {
        githubPush()
    }
    stages {
        stage('Clone') {
            steps {
                git 'https://github.com/your-repo.git'
            }
        }
    }
}



Securing Credentials in Jenkins
Instead of hardcoding passwords/API keys, use Jenkins Credentials Store.


pipeline {
    agent any
    environment {
        SECRET_TOKEN = credentials('my-secret-token')
    }
    stages {
        stage('Use Secret') {
            steps {
                script {
                    sh "echo My token is ${SECRET_TOKEN}" // Will NOT display token in logs
                }
            }
        }
    }
}


Backup & Disaster Recovery in Jenkins

0 2 * * * tar -czvf /backups/jenkins_backup_$(date +\%F).tar.gz /var/lib/jenkins

Using the ThinBackup Plugin (GUI)
üìå Best for small Jenkins instances


Jenkins Disaster Recovery (DR) Strategy

Active-Passive Setup (Secondary Jenkins Server)
Run a standby Jenkins server that stays updated with the latest backup.
Steps:
1Ô∏è‚É£ Set up a secondary Jenkins instance
2Ô∏è‚É£ Sync backups every hour:
rsync -avz /var/lib/jenkins secondary-server:/var/lib/jenkins
3Ô∏è‚É£ If primary Jenkins fails, switch to the secondary server.
‚úÖ Benefit: Minimal downtime (failover within minutes).

 Jenkins High Availability (Active-Active)
Use Kubernetes + Load Balancer to distribute traffic across multiple Jenkins nodes.


Jenkins Performance Optimization
Increase JVM Heap Size
By default, Jenkins may run out of memory under heavy workloads. Increase the JVM heap size to prevent performance issues.

üìå Modify Jenkins Service Configuration
Edit the Jenkins configuration file (/etc/default/jenkins or /etc/sysconfig/jenkins) and increase the memory:

JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Xms2g -Xmx4g"
‚úÖ This sets the minimum memory to 2GB and max to 4GB.

sudo systemctl restart jenkins


Limit Build History to Save Storage

 Install Prometheus Plugin
1Ô∏è‚É£ Go to Manage Jenkins ‚Üí Manage Plugins
2Ô∏è‚É£ Install Prometheus Metrics Plugin
3Ô∏è‚É£ Enable Prometheus Endpoint at http://JENKINS_URL/metrics

‚úÖ Now, Prometheus can scrape Jenkins metrics.


